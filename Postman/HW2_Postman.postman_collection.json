{
	"info": {
		"_postman_id": "fef53c4e-b87e-4fc2-ab5d-a16a7f7f03dc",
		"name": "HW2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function (){\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"\r",
							"  var jsonData = pm.response.json();  \r",
							"\r",
							"//Проверить, что name в ответе равно name из request (name вбить руками)\r",
							"\r",
							"pm.test(\"Check name from the response equals to name from request (manual name input)\", function () {\r",
							"  pm.expect(jsonData.name).to.eql(\"Elena\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно name из request (age вбить руками)\r",
							"pm.test(\"Check age from the response equals to age from request (manual age input)\", function () {\r",
							"  pm.expect(jsonData.age).to.eql(\"20\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно name из request (salary вбить руками)\r",
							"pm.test(\"Check salary from the response equals to salary from request (manual salary input)\", function () {\r",
							"  pm.expect(jsonData.salary).to.eql(1000);\r",
							"});    \r",
							"\r",
							"//Спарсить request\r",
							"\r",
							"var req = request.data;\r",
							"console.log(request.data);\r",
							"\r",
							"//Проверить, что name в ответе равно name из request (name взять из request)\r",
							"\r",
							"pm.test(\"Check name from response equals to name from request (take name from request)\", function () {\r",
							"   \r",
							"    pm.expect(request.data.name).to.eql(jsonData.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно name из request (age взять из request)\r",
							"\r",
							"pm.test(\"Check age from response equals to age from request (take age from request)\", function () {\r",
							"   \r",
							"    pm.expect(request.data.age).to.eql(jsonData.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно name из request (salary взять из request)\r",
							"pm.test(\"Check salary from response equals to salary from request (take salary from request)\", function () {\r",
							"   //req = request.data;\r",
							"    pm.expect(+request.data.salary).to.eql(jsonData.salary);\r",
							"});\r",
							"//Вывести в консоль параметр family из response\r",
							"\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить, что u_salary_1_5_year в ответе равно salary*4  (salary забрать из request)(req.salary)*4\r",
							"\r",
							"pm.test(\"Check u_salary_1_5_year from the request equals to  salary*4 (use salary from the request)\", function () {\r",
							" pm.expect(jsonData.family.u_salary_1_5_year).to.eql((req.salary)*4);\r",
							" \r",
							"});    \r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Elena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос\r",
							"//Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"\r",
							"var jsonDat = pm.response.json();  \r",
							"console.log (jsonDat);\r",
							"\r",
							"//Спарсить request\r",
							"\r",
							"  var req= pm.request.url.query.toObject() ;\r",
							"\r",
							"//Проверить, что name в ответе равно name в request (name взять из request) \r",
							"\r",
							"pm.test(\"Check name from response equalss to name from request (take name from request)\", function () {\r",
							"    pm.expect(req.name).to.eql(jsonDat.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно name в request (age взять из request) \r",
							"\r",
							"pm.test(\"Check age from response to be equal to age from request (take age from request)\", function () {\r",
							"    pm.expect(req.age).to.eql(jsonDat.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно name в request (salary взять из request) \r",
							"\r",
							"pm.test(\"Check salary from response to be equal salary from request (take salary from request)\", function () {\r",
							"    pm.expect(+req.salary).to.eql(jsonDat.salary);\r",
							"}); \r",
							"\r",
							"//Вывести в консоль парамаетр family из response\r",
							"console.log(jsonDat.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметр name\r",
							"\r",
							"var resp_dog=pm.response.json().family.pets.dog;\r",
							"//console.log(resp_dog);\r",
							"\r",
							"pm.test(\"Check that paramrter Dog has a parameter name\", function () {\r",
							"    pm.expect(resp_dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметр age\r",
							"\r",
							"pm.test(\"Chack that parameter Dog has a parameter age\", function() {\r",
							"pm.expect(resp_dog).to.have.property(\"age\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значени Lucky\r",
							"\r",
							"var resp_dog_name=pm.response.json().family.pets.dog.name;\r",
							"//console.log(resp_dog);\r",
							"\r",
							"pm.test(\"Check that parameter Dog_name is Luky\", function () {\r",
							"    pm.expect(resp_dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"\r",
							"var resp_dog_age=pm.response.json().family.pets.dog.age;\r",
							"//console.log(resp_dog_age); \r",
							"\r",
							"pm.test(\"Check that parameter Dog_age equals 4\", function () {\r",
							"    pm.expect(resp_dog_age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Elena&age=20&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос\r",
							"//Статус код 20\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить респонс боди в jsonn\r",
							"\r",
							"var resp=pm.response.json();\r",
							"//console.log(resp);\r",
							"\r",
							"//Спарсить request\r",
							"\r",
							"var req= pm.request.url.query.toObject() ;\r",
							"//console.log(req);\r",
							"\r",
							"//Проверить, что name в ответе соответствует name из request (namr забрать из request)\r",
							"pm.test(\"Check that name from the resonse corresponds to name from request (take name from request)\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age из response соответствует age из request (age взять из request) \r",
							"\r",
							"pm.test(\"Check that age from resonse corresponds to age from request (take age from request)\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req.age);\r",
							"});\r",
							"//Вывестив консоль параметр salasry из request\r",
							"\r",
							"console.log(+req.salary);\r",
							"\r",
							"//Вывестив консоль параметр salasry из response\r",
							"\r",
							"console.log(resp.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемнет параметра salary из response\r",
							"\r",
							"console.log(resp.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемнет параметра salary из response\r",
							"\r",
							"console.log(+resp.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемнет параметра salary из response\r",
							"\r",
							"console.log(+resp.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check that 0 salary element is equal to salary from requet\", function () {\r",
							"       pm.expect(resp.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент salary равен salary*2 из request (salary забрать из request)\r",
							"\r",
							"var salary=+req.salary\r",
							"//console.log(salary);\r",
							"\r",
							"pm.test(\"Check that 1 salary element is equal to salary from requet*2\", function () {\r",
							"       pm.expect(+resp.salary[1]).to.eql(salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент salary равен salary*3 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check that 1 salary element is equal to salary from requet*3\", function () {\r",
							"       pm.expect(+resp.salary[2]).to.eql(salary*3);\r",
							"});\r",
							"\r",
							"//Передать в окружждение переменную name\r",
							"pm.environment.set(\"name\", req.name);\r",
							"\r",
							"//Передать в окружждение переменную age\r",
							"\r",
							"pm.environment.set(\"age\", req.age);\r",
							"\r",
							"//Передать в окружждение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"//Написать цикл, который выведет в консоль по порядку элементы списка из параметра salary\r",
							"\r",
							"for (let i=0; i<3; i++){\r",
							"    console.log(resp.salary[i]);\r",
							"};\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Elena&age=20&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр name из окружения\r",
							"//Вставить параметр age из окружения\r",
							"//Вставить параметр salary из окружения\r",
							"//Отправить запрос\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json\r",
							"\r",
							"var jsonData = pm.response.json(); \r",
							"//console.log(jsonData);\r",
							"\r",
							"//Спарсить request\r",
							"\r",
							"var req = request.data;\r",
							"//console.log(request.data);\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"json response has parameter start_qa_qalary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Check that json response has parameter qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Check that json response has parameter qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Check that json response has parameter qa_salary_after_1.5_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Check that json response has parameter qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Check that json response has parameter person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забраит из request)\r",
							"var resp=jsonData;\r",
							"\r",
							"pm.test(\"Check that start_qa_salary equals to salary from request (take salary from request)\", function () {\r",
							"    pm.expect(+req.salary).to.eql(resp.start_qa_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"\r",
							"var salary1=+req.salary;\r",
							"\r",
							"pm.test(\"Check that qa_salary_after_6_months equals to salary*2 from request (take salary from request)\", function () {\r",
							"    pm.expect(salary1*2).to.eql(resp.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check that qa_salary_after_12_months equals to salary*2 from request (take salary from request)\", function () {\r",
							"    pm.expect(salary1*2.7).to.eql(resp.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_.1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check that qa_salary_after_1.5_year equals to salary*3.3 from request (take salary from request)\", function () {\r",
							"    pm.expect(salary1*3.3).to.eql(resp[\"qa_salary_after_1.5_year\"]);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_.3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check that qa_salary_after_3.5_years equals to salary*3.8 from request (take salary from request)\", function () {\r",
							"    pm.expect(salary1*3.8).to.eql(resp[\"qa_salary_after_3.5_years\"]);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемнет из u_name равен salary  из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check that the 1-st element from u_name of parameter person is equal to salary from request (take salary from request)\", function () {\r",
							"pm.expect(salary1).to.eql(resp.person.u_name[1]);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_age равен age из request (agae забрать из request)\r",
							"\r",
							"pm.test(\"Check that parameter u_age equals to age from request (take age from request)\", function () {\r",
							"    pm.expect(+req.age).to.eql(resp.person.u_age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check that parameter u_salary_5_years equals to salary*4.2 from request (takr salary from request)\", function () {\r",
							"    pm.expect(salary1*4.2).to.eql(resp.person.u_salary_5_years);\r",
							"});\r",
							"\r",
							"//Написать цикл, который выведен в консоль по порядку элеметы списка из параметра person \r",
							"var ress=jsonData.person;\r",
							"let i=0;\r",
							"\r",
							"var arr=Object.values(ress);\r",
							"var arrA=Object.keys(ress);\r",
							"for (i=0; i<3; i++) {\r",
							"    \r",
							"    if (arr[i]>0){\r",
							"        console.log(arrA[i] + \":\" + arr[i]); \r",
							"    } \r",
							"    else{arr2=arr[i]; \r",
							"        for (j=0; j<3; j++) {\r",
							"            console.log(arr2[j]);\r",
							"        }}\r",
							"        \r",
							"    \r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}